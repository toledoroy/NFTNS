/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ConvenienceFuncsInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "ERC20Transfered(address,address,uint256)": EventFragment;
    "ERC721Transfered(address,address,uint256)": EventFragment;
    "ETHTransfered(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ERC20Transfered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721Transfered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ETHTransfered"): EventFragment;
}

export type ERC20TransferedEvent = TypedEvent<
  [string, string, BigNumber],
  { token: string; recipient: string; amount: BigNumber }
>;

export type ERC20TransferedEventFilter = TypedEventFilter<ERC20TransferedEvent>;

export type ERC721TransferedEvent = TypedEvent<
  [string, string, BigNumber],
  { token: string; recipient: string; amount: BigNumber }
>;

export type ERC721TransferedEventFilter =
  TypedEventFilter<ERC721TransferedEvent>;

export type ETHTransferedEvent = TypedEvent<
  [string, BigNumber],
  { recipient: string; amount: BigNumber }
>;

export type ETHTransferedEventFilter = TypedEventFilter<ETHTransferedEvent>;

export interface ConvenienceFuncs extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConvenienceFuncsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "ERC20Transfered(address,address,uint256)"(
      token?: string | null,
      recipient?: string | null,
      amount?: null
    ): ERC20TransferedEventFilter;
    ERC20Transfered(
      token?: string | null,
      recipient?: string | null,
      amount?: null
    ): ERC20TransferedEventFilter;

    "ERC721Transfered(address,address,uint256)"(
      token?: string | null,
      recipient?: string | null,
      amount?: null
    ): ERC721TransferedEventFilter;
    ERC721Transfered(
      token?: string | null,
      recipient?: string | null,
      amount?: null
    ): ERC721TransferedEventFilter;

    "ETHTransfered(address,uint256)"(
      recipient?: string | null,
      amount?: null
    ): ETHTransferedEventFilter;
    ETHTransfered(
      recipient?: string | null,
      amount?: null
    ): ETHTransferedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
