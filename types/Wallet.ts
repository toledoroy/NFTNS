/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface WalletInterface extends ethers.utils.Interface {
  functions: {
    "ERC721_RECEIVED()": FunctionFragment;
    "call(address,uint256,bytes)": FunctionFragment;
    "contractAddress()": FunctionFragment;
    "contractFactory()": FunctionFragment;
    "initialize(address,address,uint256)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "tokenId()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ERC721_RECEIVED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "call",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "tokenId", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ERC721_RECEIVED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "call", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenId", data: BytesLike): Result;

  events: {
    "CallExecuted(address,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CallExecuted"): EventFragment;
}

export type CallExecutedEvent = TypedEvent<
  [string, BigNumber, string],
  { target: string; value: BigNumber; data: string }
>;

export type CallExecutedEventFilter = TypedEventFilter<CallExecutedEvent>;

export interface Wallet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WalletInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ERC721_RECEIVED(overrides?: CallOverrides): Promise<[string]>;

    call(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractAddress(overrides?: CallOverrides): Promise<[string]>;

    contractFactory(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _contractFactory: string,
      _contractAddress: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenId(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  ERC721_RECEIVED(overrides?: CallOverrides): Promise<string>;

  call(
    target: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractAddress(overrides?: CallOverrides): Promise<string>;

  contractFactory(overrides?: CallOverrides): Promise<string>;

  initialize(
    _contractFactory: string,
    _contractAddress: string,
    _tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenId(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    ERC721_RECEIVED(overrides?: CallOverrides): Promise<string>;

    call(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    contractAddress(overrides?: CallOverrides): Promise<string>;

    contractFactory(overrides?: CallOverrides): Promise<string>;

    initialize(
      _contractFactory: string,
      _contractAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "CallExecuted(address,uint256,bytes)"(
      target?: string | null,
      value?: null,
      data?: null
    ): CallExecutedEventFilter;
    CallExecuted(
      target?: string | null,
      value?: null,
      data?: null
    ): CallExecutedEventFilter;
  };

  estimateGas: {
    ERC721_RECEIVED(overrides?: CallOverrides): Promise<BigNumber>;

    call(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    contractFactory(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _contractFactory: string,
      _contractAddress: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ERC721_RECEIVED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    call(
      target: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _contractFactory: string,
      _contractAddress: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
